<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="2" name="pytest" skips="2" tests="61" time="0.934"><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="16" name="test_evaluator_iterable" time="0.0013403892517089844"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="31" name="test_evaluator_iterator" time="0.0014538764953613281"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="52" name="test_evaluator_iterator_iterable" time="0.0015149116516113281"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="63" name="test_evaluator_iterable_iterator_and_comparison" time="0.0013275146484375"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="75" name="test_evaluator_comprehension" time="0.0013298988342285156"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="84" name="test_evaluator_iterable_any" time="0.0011022090911865234"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="98" name="test_evaluator_iterable_all" time="0.0008862018585205078"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="113" name="test_evaluator_repr" time="0.0015251636505126953"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="130" name="test_evaluator_complex_1" time="0.001190185546875"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="141" name="test_evaluator_str" time="0.0008535385131835938"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="157" name="test_evaluator_bytes" time="0.0009129047393798828"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="174" name="test_evaluator_format" time="0.001538991928100586"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="196" name="test_evaluator_sizeof" time="0.0008523464202880859"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="214" name="test_evaluator_comparable" time="0.0016248226165771484"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="234" name="test_evaluator_comparable_normal_function_first" time="0.0014743804931640625"><skipped message="it is not possible anymore to use functions as expressions, they need to be converted first" type="pytest.skip">mini_lambda/tests/test_mini_lambda.py:234: &lt;py._xmlgen.raw object at 0x7ff851691780&gt;</skipped></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="247" name="test_evaluator_comparable_both_evaluators" time="0.0016622543334960938"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="260" name="test_evaluator_hashable" time="0.0008800029754638672"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="276" name="test_evaluator_truth_testable" time="0.000885009765625"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="292" name="test_evaluator_truth_testable_not" time="0.0014433860778808594"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="308" name="test_evaluator_attribute" time="0.0014033317565917969"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="327" name="test_evaluator_nonexistent_attribute_2" time="0.001535654067993164"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="378" name="test_evaluator_container" time="0.0009441375732421875"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="395" name="test_evaluator_sized" time="0.0016906261444091797"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="409" name="test_evaluator_sized_compared" time="0.0010480880737304688"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="432" name="test_evaluator_reversible" time="0.0009989738464355469"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="444" name="test_evaluator_mapping" time="0.0008137226104736328"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="464" name="test_evaluator_mapping_key" time="0.001638174057006836"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="478" name="test_evaluator_list_slice" time="0.0010187625885009766"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="495" name="test_evaluator_numeric" time="0.0016245841979980469"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="548" name="test_evaluator_print_pow" time="0.0007414817810058594"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="559" name="test_evaluator_int_convertible" time="0.0014045238494873047"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="573" name="test_evaluator_maths" time="0.0018928050994873047"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="593" name="test_evaluator_long_convertible" time="0.0013370513916015625"><skipped message="long seems not to be around anymore..." type="pytest.skip">mini_lambda/tests/test_mini_lambda.py:593: &lt;py._xmlgen.raw object at 0x7ff8515d8e10&gt;</skipped></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="609" name="test_evaluator_float_convertible" time="0.001216888427734375"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="624" name="test_evaluator_complex_convertible" time="0.0009133815765380859"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="640" name="test_evaluator_oct_convertible" time="0.001226186752319336"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="655" name="test_evaluator_index_slice" time="0.0012712478637695312"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="679" name="test_evaluator_different_vars" time="0.0016720294952392578"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="713" name="test_constants_named" time="0.0016472339630126953"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda" file="mini_lambda/tests/test_mini_lambda.py" line="725" name="test_generated_methods" time="0.0015041828155517578"><system-out>sin(x)
</system-out></testcase><testcase classname="mini_lambda.tests.test_mini_lambda_add_methods" file="mini_lambda/tests/test_mini_lambda_add_methods.py" line="5" name="test_add_new_unbound_positional" time="0.001104116439819336"><system-out>log(2.718281828459045 ** x)
</system-out></testcase><testcase classname="mini_lambda.tests.test_mini_lambda_add_methods" file="mini_lambda/tests/test_mini_lambda_add_methods.py" line="34" name="test_add_new_unbound_keywords" time="0.005941152572631836"><failure message="AssertionError: assert &apos;1 + divide(N...num=1, den=x)&apos; == &apos;1 + divide(No...den=x, num=1)&apos;
  - 1 + divide(None, x, num=1, den=x)
  ?                          -------
  + 1 + divide(None, x, den=x, num=1)
  ?                    +++++++">def test_add_new_unbound_keywords():
        &quot;&quot;&quot; Tests that the mechanism provided to support additional functions works, by testing that a custom function with
        positional and keyword arguments can be converted.&quot;&quot;&quot;
    
        from mini_lambda import x, _
    
        def divide(dummy, times, num, den=None):
            &quot;&quot;&quot; an existing function that you want to convert &quot;&quot;&quot;
            return times * num / den
    
        Divide = make_lambda_friendly_method(divide)
        complex_constant = _(1 + Divide(None, x, den=x, num=1))
    
        assert complex_constant(10) == 2
        assert complex_constant(-5) == 2
&gt;       assert str(complex_constant) == &apos;1 + divide(None, x, den=x, num=1)&apos;
E       AssertionError: assert &apos;1 + divide(N...num=1, den=x)&apos; == &apos;1 + divide(No...den=x, num=1)&apos;
E         - 1 + divide(None, x, num=1, den=x)
E         ?                          -------
E         + 1 + divide(None, x, den=x, num=1)
E         ?                    +++++++

mini_lambda/tests/test_mini_lambda_add_methods.py:50: AssertionError</failure></testcase><testcase classname="mini_lambda.tests.test_mini_lambda_add_methods" file="mini_lambda/tests/test_mini_lambda_add_methods.py" line="52" name="test_add_new_unbound_no_name" time="0.0017573833465576172"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda_add_methods" file="mini_lambda/tests/test_mini_lambda_add_methods.py" line="87" name="test_add_new_bound_positional" time="0.0017859935760498047"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda_add_methods" file="mini_lambda/tests/test_mini_lambda_add_methods.py" line="105" name="test_add_new_bound_keywords_static_class" time="0.001844167709350586"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda_add_methods" file="mini_lambda/tests/test_mini_lambda_add_methods.py" line="148" name="test_donot_add_new_bound_with_constants" time="0.0020835399627685547"></testcase><testcase classname="mini_lambda.tests.test_mini_lambda_add_methods" file="mini_lambda/tests/test_mini_lambda_add_methods.py" line="165" name="test_add_class" time="0.0016672611236572266"></testcase><testcase classname="mini_lambda.tests.test_readme" file="mini_lambda/tests/test_readme.py" line="6" name="test_doc_index_1" time="0.0008702278137207031"><system-out>Hello, world !
&apos;Hello, &apos; + s + &apos; !&apos;
</system-out></testcase><testcase classname="mini_lambda.tests.test_readme" file="mini_lambda/tests/test_readme.py" line="23" name="test_doc_index_2" time="0.0017325878143310547"><system-out>s.islower()
s[0:4].upper() + &apos; !&apos;
-x &gt; x ** 2
(1 - 2 * x &lt;= -x) | (-x &gt; x ** 2)
log(10 ** x, 10)
</system-out></testcase><testcase classname="mini_lambda.tests.test_readme" file="mini_lambda/tests/test_readme.py" line="56" name="test_doc_usage_input_variables" time="0.001455545425415039"></testcase><testcase classname="mini_lambda.tests.test_readme" file="mini_lambda/tests/test_readme.py" line="66" name="test_doc_usage_expressions_1" time="0.001489400863647461"><system-out>&lt;class &apos;mini_lambda.main._LambdaExpression&apos;&gt;
1234
x
</system-out></testcase><testcase classname="mini_lambda.tests.test_readme" file="mini_lambda/tests/test_readme.py" line="83" name="test_doc_usage_expressions_2" time="0.0016927719116210938"></testcase><testcase classname="mini_lambda.tests.test_readme" file="mini_lambda/tests/test_readme.py" line="114" name="test_doc_usage_expressions_3_all_at_once" time="0.001600027084350586"><system-out>Hello, world !
</system-out></testcase><testcase classname="mini_lambda.tests.test_readme" file="mini_lambda/tests/test_readme.py" line="121" name="test_doc_usage_syntax_1" time="0.0015773773193359375"></testcase><testcase classname="mini_lambda.tests.test_readme" file="mini_lambda/tests/test_readme.py" line="138" name="test_doc_usage_syntax_2" time="0.001676321029663086"></testcase><testcase classname="mini_lambda.tests.test_readme" file="mini_lambda/tests/test_readme.py" line="214" name="test_doc_usage_other_constants" time="0.0014722347259521484"></testcase><testcase classname="mini_lambda.tests.test_readme" file="mini_lambda/tests/test_readme.py" line="230" name="test_doc_usage_other_functions_1" time="0.001371145248413086"><system-out>startswith(&apos;hello&apos;, &apos;el&apos;, x)
</system-out></testcase><testcase classname="mini_lambda.tests.test_readme" file="mini_lambda/tests/test_readme.py" line="268" name="test_doc_usage_other_functions_2" time="0.001561880111694336"><failure message="AssertionError: assert &apos;bar1(x, num=1, den=x)&apos; == &apos;bar1(x, den=x, num=1)&apos;
  - bar1(x, num=1, den=x)
  + bar1(x, den=x, num=1)">def test_doc_usage_other_functions_2():
        &quot;&quot;&quot; Tests that the example in doc/usage in the others/functions section (2) works &quot;&quot;&quot;
        from mini_lambda import x, _
    
        class Foo:
            @staticmethod
            def bar1(times, num, den):
                return times * num / den
    
            @classmethod
            def bar2(cls, times, num, den):
                return times * num / den
    
        FooBar1 = make_lambda_friendly_method(Foo.bar1)
        fun1 = _(FooBar1(x, den=x, num=1))
    
        FooBar2a = make_lambda_friendly_method(Foo.bar2)  # the `cls` argument is `Foo` and cant be changed
        fun2a = _(FooBar2a(x, den=x, num=1))
    
        FooBar2b = make_lambda_friendly_method(Foo.bar2.__func__)  # the `cls` argument can be changed
        fun2b = _(FooBar2b(Foo, x, den=x, num=1))
    
        assert fun1(5.5) == 1
&gt;       assert(str(fun1)) == &apos;bar1(x, den=x, num=1)&apos;
E       AssertionError: assert &apos;bar1(x, num=1, den=x)&apos; == &apos;bar1(x, den=x, num=1)&apos;
E         - bar1(x, num=1, den=x)
E         + bar1(x, den=x, num=1)

mini_lambda/tests/test_readme.py:292: AssertionError</failure></testcase><testcase classname="mini_lambda.tests.test_readme" file="mini_lambda/tests/test_readme.py" line="300" name="test_doc_usage_other_classes" time="0.004723787307739258"></testcase><testcase classname="mini_lambda.tests.test_readme" file="mini_lambda/tests/test_readme.py" line="313" name="test_doc_usage_all_at_once" time="0.008461713790893555"><system-out>   0  1
0  1  2
</system-out></testcase><testcase classname="mini_lambda.tests.test_readme" file="mini_lambda/tests/test_readme.py" line="325" name="test_doc_usage_already_imported" time="0.000766754150390625"></testcase></testsuite>